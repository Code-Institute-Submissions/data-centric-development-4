{"filter":false,"title":"app.py","tooltip":"/cocktail-mix-data/app.py","undoManager":{"mark":22,"position":22,"stack":[[{"start":{"row":0,"column":0},"end":{"row":54,"column":57},"action":"remove","lines":["import os","from flask import Flask, render_template, redirect, request, url_for","from flask_pymongo import PyMongo","from bson.objectid import ObjectId","","","","app = Flask(__name__)","app.secret_key = os.getenv(\"SECRET\", \"randomstring123\")","app.config[\"MONGO_DBNAME\"] = 'cocktail_mix'","app.config[\"MONGO_URI\"] ='mongodb+srv://root:r00tUser@myfirstcluster-hmnju.mongodb.net/cocktail_mix?retryWrites=true&w=majority'","","","mongo = PyMongo(app)","","","app=Flask(__name__,template_folder='template')","@app.route('/get_cocktails')","def get_cocktails():","    _cocktails = mongo.db.cocktails.find()","    cocktail_list = [cocktail for cocktail in _cocktails]","    return render_template('cocktails.html', cocktails = cocktail_list)",""," ","@app.route('/add_cocktail')","def add_task():","    categories = mongo.db.categories.find()","    category_list = [category for category in categories]","    return render_template('addcocktails.html', categories = category_list )","","@app.route('/insert_cocktail', methods=['POST'])","def insert_cocktail():","    cocktails = mongo.db.cocktails","    cocktails.insert_one(request.form.to_dict())","    return redirect(url_for('get_cocktails'))","    ","@app.route('/edit_cocktail/<cocktail_id>')","def edit_cocktail(cocktail_id):","    the_cocktail = mongo.db.cocktails.find_one({\"_id\": ObjectId(cocktail_id)})","    all_categories = mongo.db.categories.find()","    return render_template('editcocktail.html', cocktail=the_cocktail, categories=all_categories)","","@app.route('/get_categories')","def get_categories():","    return render_template('cocktails.html', categories = mongo.db.categories.find())","","if __name__ == '__main__':","    app.run(host=os.environ.get('IP'),","            port=int(os.environ.get('PORT')),","            debug=True)","            ","","","app.run(host=os.getenv(\"IP\", \"0.0.0.0\"),","        port=int(os.getenv(\"PORT\", \"5000\")), debug=False)"],"id":2},{"start":{"row":0,"column":0},"end":{"row":187,"column":23},"action":"insert","lines":["import os","from flask import Flask, render_template, redirect, request, url_for, session, flash","from flask_pymongo import PyMongo","from bson.objectid import ObjectId","from werkzeug.security import generate_password_hash, check_password_hash","if os.path.exists(\"env.py\"):","    import env","","app = Flask(__name__)","app.secret_key = os.environ.get(\"SECRET_KEY\")","app.config[\"MONGO_DBNAME\"] = os.environ.get(\"MONGO_DBNAME\")","app.config[\"MONGO_URI\"] = os.environ.get(\"MONGO_URI\")","","","","mongo = PyMongo(app)","","users_collection = mongo.db.users","recipes_collection = mongo.db.recipes","","","","","","","","","@app.route('/get_cocktails')","def get_cocktails():","    _cocktails = mongo.db.cocktails.find()","    cocktail_list = [cocktail for cocktail in _cocktails]","    return render_template('cocktails.html', cocktails = cocktail_list, )","",""," ","@app.route('/add_cocktail')","def add_cocktail():","    categories = mongo.db.categories.find()","    category_list = [category for category in categories]","    return render_template('addcocktails.html', categories = category_list )","","","@app.route('/insert_cocktail', methods=['POST'])","def insert_cocktail():","    cocktails = mongo.db.cocktails","    cocktails.insert_one(request.form.to_dict())","    return redirect(url_for('get_cocktails'))","","","@app.route('/edit_cocktail<cocktail_id>')","def edit_cocktail(cocktail_id):","    the_cocktail = mongo.db.cocktails.find_one({\"_id\": ObjectId(cocktail_id)})","    all_categories = mongo.db.categories.find()","    category_list = [category for category in all_categories]","    return render_template('editcocktail.html', cocktail=the_cocktail, categories=category_list)","","","@app.route('/get_categories')","def get_categories():","    return render_template('cocktails.html', categories = mongo.db.categories.find())","","","@app.route('/update_cocktail/<cocktail_id>', methods=[\"POST\"])","def update_cocktail(cocktail_id):","    cocktails = mongo.db.cocktails","    cocktails.update( {'_id':ObjectId(cocktail_id)},","    {","        'category_name' : request.form.get('category_name'),","        'profile' : request.form.get('profile'),","        'cocktail_name' : request.form.get('cocktail_name'),","        'cocktail_info' : request.form.get('cocktail_info'),","        'cocktail_equipments' : request.form.get('cocktail_equipments'),","        'cocktail_ingredients' : request.form.get('cocktail_ingredients')","","    })","    return redirect(url_for('get_cocktails'))","","","","","@app.route('/delete_cocktail/<cocktail_id>')","def delete_cocktail(cocktail_id):","    mongo.db.cocktails.remove({'_id':ObjectId(cocktail_id)})","    return redirect(url_for('get_cocktails'))","","# Login","@app.route(\"/\")","@app.route('/login', methods=['GET'])","def login():","\t# Check if user is not logged in already","\tif 'user' in session:","\t\tuser_in_db = users_collection.find_one({\"username\": session['user']})","\t\tif user_in_db:","\t\t\t# If so redirect user to his profile","\t\t\tflash(\"You are logged in already!\")","\t\t\treturn redirect(url_for('get_cocktails', user=user_in_db['username']))","\telse:","\t\t# Render the page for user to be able to log in","\t\treturn render_template(\"login.html\")","","# Check user login details from login form","@app.route('/user_auth', methods=['POST'])","def user_auth():","\tform = request.form.to_dict()","\tuser_in_db = users_collection.find_one({\"username\": form['username']})","\t# Check for user in database","\tif user_in_db:","\t\t# If passwords match (hashed / real password)","\t\tif check_password_hash(user_in_db['password'], form['user_password']):","\t\t\t# Log user in (add to session)","\t\t\tsession['user'] = form['username']","\t\t\t# If the user is admin redirect him to admin area","\t\t\tif session['user'] == \"user\":","\t\t\t\treturn redirect(url_for('get_cocktails'))","\t\t\telse:","\t\t\t\tflash(\"You were logged in!\")","\t\t\t\treturn redirect(url_for('get_cocktails'))","\t\t\t","\t\telse:","\t\t\tflash(\"Wrong password or user name!\")","\t\t\treturn redirect(url_for('login'))","\telse:","\t\tflash(\"You must be registered!\")","\t\treturn redirect(url_for('register'))","\t\t\t","","# Sign up","@app.route('/register', methods=['GET', 'POST'])","def register():","\t# Check if user is not logged in already","\tif 'user' in session:","\t\tflash('You are already sign in!')","\t\treturn redirect(url_for('login'))","\tif request.method == 'POST':","\t\tform = request.form.to_dict()","\t\t# Check if the password and password1 actualy match ","\t\tif form['user_password'] == form['user_password1']:","\t\t\t# If so try to find the user in db","\t\t\tuser = users_collection.find_one({\"username\" : form['username']})","\t\t\tif user:","\t\t\t\tflash(f\"{form['username']} already exists!\")","\t\t\t\treturn redirect(url_for('register'))","\t\t\t# If user does not exist register new user","\t\t\telse:\t\t\t\t","\t\t\t\t# Hash password","\t\t\t\thash_pass = generate_password_hash(form['user_password'])","\t\t\t\t#Create new user with hashed password","\t\t\t\tusers_collection.insert_one(","\t\t\t\t\t{","\t\t\t\t\t\t'username': form['username'],","\t\t\t\t\t\t'email': form['email'],","\t\t\t\t\t\t'password': hash_pass","\t\t\t\t\t}","\t\t\t\t)","\t\t\t\t# Check if user is actualy saved","\t\t\t\tuser_in_db = users_collection.find_one({\"username\": form['username']})","\t\t\t\tif user_in_db:","\t\t\t\t\t# Log user in (add to session)","\t\t\t\t\tsession['user'] = user_in_db['username']","\t\t\t\t\treturn redirect(url_for('get_cocktails', user=user_in_db['username']))","\t\t\t\telse:","\t\t\t\t\tflash(\"There was a problem saving your profile\")","\t\t\t\t\treturn redirect(url_for('register'))","","\t\telse:","\t\t\tflash(\"Passwords dont match!\")","\t\t\treturn redirect(url_for('register'))","\t\t","\treturn render_template(\"register.html\")","","# Log out","@app.route('/logout')","def logout():","\t# Clear the session","\tsession.clear()","\tflash('You were logged out!')","\treturn redirect(url_for('login'))","","","","","","","","if __name__ == \"__main__\":","    app.run(host=os.environ.get(\"IP\"),","            port=int(os.environ.get(\"PORT\")),","            debug=True)"]}],[{"start":{"row":0,"column":0},"end":{"row":187,"column":23},"action":"remove","lines":["import os","from flask import Flask, render_template, redirect, request, url_for, session, flash","from flask_pymongo import PyMongo","from bson.objectid import ObjectId","from werkzeug.security import generate_password_hash, check_password_hash","if os.path.exists(\"env.py\"):","    import env","","app = Flask(__name__)","app.secret_key = os.environ.get(\"SECRET_KEY\")","app.config[\"MONGO_DBNAME\"] = os.environ.get(\"MONGO_DBNAME\")","app.config[\"MONGO_URI\"] = os.environ.get(\"MONGO_URI\")","","","","mongo = PyMongo(app)","","users_collection = mongo.db.users","recipes_collection = mongo.db.recipes","","","","","","","","","@app.route('/get_cocktails')","def get_cocktails():","    _cocktails = mongo.db.cocktails.find()","    cocktail_list = [cocktail for cocktail in _cocktails]","    return render_template('cocktails.html', cocktails = cocktail_list, )","",""," ","@app.route('/add_cocktail')","def add_cocktail():","    categories = mongo.db.categories.find()","    category_list = [category for category in categories]","    return render_template('addcocktails.html', categories = category_list )","","","@app.route('/insert_cocktail', methods=['POST'])","def insert_cocktail():","    cocktails = mongo.db.cocktails","    cocktails.insert_one(request.form.to_dict())","    return redirect(url_for('get_cocktails'))","","","@app.route('/edit_cocktail<cocktail_id>')","def edit_cocktail(cocktail_id):","    the_cocktail = mongo.db.cocktails.find_one({\"_id\": ObjectId(cocktail_id)})","    all_categories = mongo.db.categories.find()","    category_list = [category for category in all_categories]","    return render_template('editcocktail.html', cocktail=the_cocktail, categories=category_list)","","","@app.route('/get_categories')","def get_categories():","    return render_template('cocktails.html', categories = mongo.db.categories.find())","","","@app.route('/update_cocktail/<cocktail_id>', methods=[\"POST\"])","def update_cocktail(cocktail_id):","    cocktails = mongo.db.cocktails","    cocktails.update( {'_id':ObjectId(cocktail_id)},","    {","        'category_name' : request.form.get('category_name'),","        'profile' : request.form.get('profile'),","        'cocktail_name' : request.form.get('cocktail_name'),","        'cocktail_info' : request.form.get('cocktail_info'),","        'cocktail_equipments' : request.form.get('cocktail_equipments'),","        'cocktail_ingredients' : request.form.get('cocktail_ingredients')","","    })","    return redirect(url_for('get_cocktails'))","","","","","@app.route('/delete_cocktail/<cocktail_id>')","def delete_cocktail(cocktail_id):","    mongo.db.cocktails.remove({'_id':ObjectId(cocktail_id)})","    return redirect(url_for('get_cocktails'))","","# Login","@app.route(\"/\")","@app.route('/login', methods=['GET'])","def login():","\t# Check if user is not logged in already","\tif 'user' in session:","\t\tuser_in_db = users_collection.find_one({\"username\": session['user']})","\t\tif user_in_db:","\t\t\t# If so redirect user to his profile","\t\t\tflash(\"You are logged in already!\")","\t\t\treturn redirect(url_for('get_cocktails', user=user_in_db['username']))","\telse:","\t\t# Render the page for user to be able to log in","\t\treturn render_template(\"login.html\")","","# Check user login details from login form","@app.route('/user_auth', methods=['POST'])","def user_auth():","\tform = request.form.to_dict()","\tuser_in_db = users_collection.find_one({\"username\": form['username']})","\t# Check for user in database","\tif user_in_db:","\t\t# If passwords match (hashed / real password)","\t\tif check_password_hash(user_in_db['password'], form['user_password']):","\t\t\t# Log user in (add to session)","\t\t\tsession['user'] = form['username']","\t\t\t# If the user is admin redirect him to admin area","\t\t\tif session['user'] == \"user\":","\t\t\t\treturn redirect(url_for('get_cocktails'))","\t\t\telse:","\t\t\t\tflash(\"You were logged in!\")","\t\t\t\treturn redirect(url_for('get_cocktails'))","\t\t\t","\t\telse:","\t\t\tflash(\"Wrong password or user name!\")","\t\t\treturn redirect(url_for('login'))","\telse:","\t\tflash(\"You must be registered!\")","\t\treturn redirect(url_for('register'))","\t\t\t","","# Sign up","@app.route('/register', methods=['GET', 'POST'])","def register():","\t# Check if user is not logged in already","\tif 'user' in session:","\t\tflash('You are already sign in!')","\t\treturn redirect(url_for('login'))","\tif request.method == 'POST':","\t\tform = request.form.to_dict()","\t\t# Check if the password and password1 actualy match ","\t\tif form['user_password'] == form['user_password1']:","\t\t\t# If so try to find the user in db","\t\t\tuser = users_collection.find_one({\"username\" : form['username']})","\t\t\tif user:","\t\t\t\tflash(f\"{form['username']} already exists!\")","\t\t\t\treturn redirect(url_for('register'))","\t\t\t# If user does not exist register new user","\t\t\telse:\t\t\t\t","\t\t\t\t# Hash password","\t\t\t\thash_pass = generate_password_hash(form['user_password'])","\t\t\t\t#Create new user with hashed password","\t\t\t\tusers_collection.insert_one(","\t\t\t\t\t{","\t\t\t\t\t\t'username': form['username'],","\t\t\t\t\t\t'email': form['email'],","\t\t\t\t\t\t'password': hash_pass","\t\t\t\t\t}","\t\t\t\t)","\t\t\t\t# Check if user is actualy saved","\t\t\t\tuser_in_db = users_collection.find_one({\"username\": form['username']})","\t\t\t\tif user_in_db:","\t\t\t\t\t# Log user in (add to session)","\t\t\t\t\tsession['user'] = user_in_db['username']","\t\t\t\t\treturn redirect(url_for('get_cocktails', user=user_in_db['username']))","\t\t\t\telse:","\t\t\t\t\tflash(\"There was a problem saving your profile\")","\t\t\t\t\treturn redirect(url_for('register'))","","\t\telse:","\t\t\tflash(\"Passwords dont match!\")","\t\t\treturn redirect(url_for('register'))","\t\t","\treturn render_template(\"register.html\")","","# Log out","@app.route('/logout')","def logout():","\t# Clear the session","\tsession.clear()","\tflash('You were logged out!')","\treturn redirect(url_for('login'))","","","","","","","","if __name__ == \"__main__\":","    app.run(host=os.environ.get(\"IP\"),","            port=int(os.environ.get(\"PORT\")),","            debug=True)"],"id":3},{"start":{"row":0,"column":0},"end":{"row":178,"column":0},"action":"insert","lines":["import os","from flask import Flask, render_template, redirect, request, url_for, session, flash","from flask_pymongo import PyMongo","from bson.objectid import ObjectId","from werkzeug.security import generate_password_hash, check_password_hash","if os.path.exists(\"env.py\"):","    import env","","app = Flask(__name__)","app.secret_key = os.environ.get(\"SECRET_KEY\")","app.config[\"MONGO_DBNAME\"] = os.environ.get(\"MONGO_DBNAME\")","app.config[\"MONGO_URI\"] = os.environ.get(\"MONGO_URI\")","","","","mongo = PyMongo(app)","","users_collection = mongo.db.users","recipes_collection = mongo.db.recipes","","","","","","","","","@app.route('/get_cocktails')","def get_cocktails():","    _cocktails = mongo.db.cocktails.find()","    cocktail_list = [cocktail for cocktail in _cocktails]","    return render_template('cocktails.html', cocktails = cocktail_list, )","",""," ","@app.route('/add_cocktail')","def add_cocktail():","    categories = mongo.db.categories.find()","    category_list = [category for category in categories]","    return render_template('addcocktails.html', categories = category_list )","","","@app.route('/insert_cocktail', methods=['POST'])","def insert_cocktail():","    cocktails = mongo.db.cocktails","    cocktails.insert_one(request.form.to_dict())","    return redirect(url_for('get_cocktails'))","","","@app.route('/edit_cocktail<cocktail_id>')","def edit_cocktail(cocktail_id):","    the_cocktail = mongo.db.cocktails.find_one({\"_id\": ObjectId(cocktail_id)})","    all_categories = mongo.db.categories.find()","    category_list = [category for category in all_categories]","    return render_template('editcocktail.html', cocktail=the_cocktail, categories=category_list)","","","@app.route('/get_categories')","def get_categories():","    return render_template('cocktails.html', categories = mongo.db.categories.find())","","","@app.route('/update_cocktail/<cocktail_id>', methods=[\"POST\"])","def update_cocktail(cocktail_id):","    cocktails = mongo.db.cocktails","    cocktails.update( {'_id':ObjectId(cocktail_id)},","    {","        'category_name' : request.form.get('category_name'),","        'profile' : request.form.get('profile'),","        'cocktail_name' : request.form.get('cocktail_name'),","        'cocktail_info' : request.form.get('cocktail_info'),","        'cocktail_equipments' : request.form.get('cocktail_equipments'),","        'cocktail_ingredients' : request.form.get('cocktail_ingredients')","","    })","    return redirect(url_for('get_cocktails'))","","","","","@app.route('/delete_cocktail/<cocktail_id>')","def delete_cocktail(cocktail_id):","    mongo.db.cocktails.remove({'_id':ObjectId(cocktail_id)})","    return redirect(url_for('get_cocktails'))","","","@app.route(\"/\")","@app.route('/login', methods=['GET'])","def login():","","\tif 'user' in session:","\t\tuser_in_db = users_collection.find_one({\"username\": session['user']})","\t\tif user_in_db:","","\t\t\treturn redirect(url_for('get_cocktails', user=user_in_db['username']))","\telse:","","\t\treturn render_template(\"login.html\")","","","@app.route('/user_auth', methods=['POST'])","def user_auth():","\tform = request.form.to_dict()","\tuser_in_db = users_collection.find_one({\"username\": form['username']})","","\tif user_in_db:","\t\t","\t\tif check_password_hash(user_in_db['password'], form['user_password']):","\t\t\t","\t\t\tsession['user'] = form['username']","\t\t\t","\t\t\tif session['user'] == \"user\":","\t\t\t\treturn redirect(url_for('get_cocktails'))","\t\t\telse:","\t\t\t\t","\t\t\t\treturn redirect(url_for('get_cocktails'))","\t\t\t","\t\telse:","\t\t\tflash(\"Wrong password or user name!\")","\t\t\treturn redirect(url_for('login'))","\telse:","\t\tflash(\"You must be registered!\")","\t\treturn redirect(url_for('register'))","\t\t\t","","","@app.route('/register', methods=['GET', 'POST'])","def register():","","\tif 'user' in session:","","\t\treturn redirect(url_for('login'))","\tif request.method == 'POST':","\t\tform = request.form.to_dict()","","\t\t ","\t\tif form['user_password'] == form['user_password1']:","\t\t\t","\t\t\tuser = users_collection.find_one({\"username\" : form['username']})","\t\t\tif user:","\t\t\t\tflash(f\"{form['username']} already exists!\")","\t\t\t\treturn redirect(url_for('register'))","","\t\t\telse:\t\t\t\t","\t\t\t\t","\t\t\t\thash_pass = generate_password_hash(form['user_password'])","","\t\t\t\tusers_collection.insert_one(","\t\t\t\t\t{","\t\t\t\t\t\t'username': form['username'],","\t\t\t\t\t\t'email': form['email'],","\t\t\t\t\t\t'password': hash_pass","\t\t\t\t\t}","\t\t\t\t)","                \t","\t\t\t\tuser_in_db = users_collection.find_one({\"username\": form['username']})","\t\t\t\tif user_in_db:","\t\t\t\t\t","\t\t\t\t\tsession['user'] = user_in_db['username']","\t\t\t\t\treturn redirect(url_for('get_cocktails', user=user_in_db['username']))","\t\t\t\telse:","\t\t\t\t\tflash(\"There was a problem saving your profile\")","\t\t\t\t\treturn redirect(url_for('register'))","","\t\telse:","\t\t\tflash(\"Passwords dont match!\")","\t\t\treturn redirect(url_for('register'))","\t\t","\treturn render_template(\"register.html\")","","","@app.route('/logout')","def logout():","\t","\tsession.clear()","\tflash('You were logged out!')","\treturn redirect(url_for('login'))","",""]}],[{"start":{"row":9,"column":44},"end":{"row":9,"column":45},"action":"insert","lines":[","],"id":4}],[{"start":{"row":9,"column":45},"end":{"row":9,"column":46},"action":"insert","lines":[" "],"id":5}],[{"start":{"row":9,"column":46},"end":{"row":9,"column":63},"action":"insert","lines":["\"randomstring123\""],"id":6}],[{"start":{"row":10,"column":58},"end":{"row":10,"column":59},"action":"insert","lines":[","],"id":7}],[{"start":{"row":10,"column":59},"end":{"row":10,"column":73},"action":"insert","lines":["\"cocktail_mix\""],"id":8}],[{"start":{"row":11,"column":52},"end":{"row":11,"column":53},"action":"insert","lines":[","],"id":9}],[{"start":{"row":11,"column":53},"end":{"row":11,"column":156},"action":"insert","lines":["\"mongodb+srv://root:r00tUser@myfirstcluster-hmnju.mongodb.net/cocktail_mix?retryWrites=true&w=majority\""],"id":10}],[{"start":{"row":87,"column":0},"end":{"row":88,"column":0},"action":"remove","lines":["@app.route('/login', methods=['GET'])",""],"id":11}],[{"start":{"row":87,"column":0},"end":{"row":87,"column":1},"action":"insert","lines":["i"],"id":12},{"start":{"row":87,"column":1},"end":{"row":87,"column":2},"action":"insert","lines":["p"]}],[{"start":{"row":87,"column":1},"end":{"row":87,"column":2},"action":"remove","lines":["p"],"id":13},{"start":{"row":87,"column":0},"end":{"row":87,"column":1},"action":"remove","lines":["i"]}],[{"start":{"row":177,"column":0},"end":{"row":180,"column":23},"action":"insert","lines":["if __name__ == \"__main__\":","    app.run(host=os.environ.get(\"IP\"),","            port=int(os.environ.get(\"PORT\")),","            debug=True)"],"id":14}],[{"start":{"row":178,"column":35},"end":{"row":178,"column":46},"action":"insert","lines":[", \"0.0.0.0\""],"id":15}],[{"start":{"row":179,"column":41},"end":{"row":179,"column":49},"action":"insert","lines":[", \"5000\""],"id":16}],[{"start":{"row":178,"column":35},"end":{"row":178,"column":47},"action":"remove","lines":[", \"0.0.0.0\"\""],"id":17}],[{"start":{"row":179,"column":42},"end":{"row":179,"column":50},"action":"remove","lines":[" \"5000\"\""],"id":18},{"start":{"row":179,"column":41},"end":{"row":179,"column":42},"action":"remove","lines":[","]}],[{"start":{"row":179,"column":41},"end":{"row":179,"column":42},"action":"insert","lines":["\""],"id":19}],[{"start":{"row":178,"column":35},"end":{"row":178,"column":36},"action":"insert","lines":["\""],"id":20}],[{"start":{"row":9,"column":46},"end":{"row":9,"column":63},"action":"remove","lines":["\"randomstring123\""],"id":21},{"start":{"row":9,"column":45},"end":{"row":9,"column":46},"action":"remove","lines":[" "]},{"start":{"row":9,"column":44},"end":{"row":9,"column":45},"action":"remove","lines":[","]}],[{"start":{"row":10,"column":58},"end":{"row":10,"column":73},"action":"remove","lines":[",\"cocktail_mix\""],"id":22}],[{"start":{"row":11,"column":52},"end":{"row":11,"column":155},"action":"remove","lines":[",\"mongodb+srv://root:r00tUser@myfirstcluster-hmnju.mongodb.net/cocktail_mix?retryWrites=true&w=majority"],"id":23},{"start":{"row":11,"column":51},"end":{"row":11,"column":53},"action":"remove","lines":["\"\""]}],[{"start":{"row":11,"column":51},"end":{"row":11,"column":52},"action":"insert","lines":["\""],"id":24}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":11,"column":52},"end":{"row":11,"column":52},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1593987844489,"hash":"718d6efef9be2a743182f93db1b532dde9f1f4b2"}